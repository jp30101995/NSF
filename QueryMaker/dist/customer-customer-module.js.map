{"version":3,"sources":["webpack:///./src/app/layout/customer/addcustomer/addcustomer.component.html","webpack:///./src/app/layout/customer/addcustomer/addcustomer.component.scss","webpack:///./src/app/layout/customer/addcustomer/addcustomer.component.ts","webpack:///./src/app/layout/customer/customer-routing.module.ts","webpack:///./src/app/layout/customer/customer.component.html","webpack:///./src/app/layout/customer/customer.component.scss","webpack:///./src/app/layout/customer/customer.component.ts","webpack:///./src/app/layout/customer/customer.module.ts","webpack:///./src/app/layout/customer/customer.service.ts","webpack:///./src/app/layout/customer/customer.ts"],"names":[],"mappings":"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","file":"customer-customer-module.js","sourcesContent":["module.exports = \"<h2 mat-dialog-title>{{ data.Title }}</h2>\\n<mat-dialog-content [formGroup]=\\\"frmAddCustomer\\\" class=\\\"mat-typography\\\">\\n  <div fxLayoutGap=\\\"20px\\\">\\n    <mat-form-field>\\n      <input\\n        matInput\\n        placeholder=\\\"Name\\\"\\n        formControlName=\\\"Name\\\"\\n        [ngClass]=\\\"{ 'is-invalid': formFields.Name.errors }\\\"\\n        [(ngModel)]=\\\"data.Name\\\"\\n      />\\n      <mat-error *ngIf=\\\"!!formFields.Name.errors\\\">\\n        <mat-error *ngIf=\\\"!!formFields.Name.errors.required\\\">Name is required</mat-error>\\n      </mat-error>\\n    </mat-form-field>\\n    <mat-form-field>\\n      <input\\n        matInput\\n        placeholder=\\\"Community Name\\\"\\n        formControlName=\\\"CommunityName\\\"\\n        [(ngModel)]=\\\"data.CommunityName\\\"\\n        [ngClass]=\\\"{ 'is-invalid': formFields.CommunityName.errors }\\\"\\n      />\\n      <mat-error *ngIf=\\\"!!formFields.CommunityName.errors\\\">\\n        <mat-error *ngIf=\\\"!!formFields.CommunityName.errors.required\\\">Community Name is required</mat-error>\\n      </mat-error>\\n    </mat-form-field>\\n  </div>\\n  <div fxLayoutGap=\\\"20px\\\">\\n    <mat-form-field>\\n      <input\\n        matInput\\n        placeholder=\\\"Email\\\"\\n        formControlName=\\\"Email\\\"\\n        [(ngModel)]=\\\"data.Email\\\"\\n        [ngClass]=\\\"{ 'is-invalid': formFields.Email.errors }\\\"\\n      />\\n      <mat-error *ngIf=\\\"!!formFields.Email.errors\\\">\\n        <mat-error *ngIf=\\\"!!formFields.Email.errors.required\\\">Email is required</mat-error>\\n        <mat-error *ngIf=\\\"!!formFields.Email.errors.email\\\">Email must be a valid email address</mat-error>\\n      </mat-error>\\n    </mat-form-field>\\n    <mat-form-field>\\n      <input\\n        matInput\\n        placeholder=\\\"ContactNo\\\"\\n        formControlName=\\\"ContactNo\\\"\\n        [(ngModel)]=\\\"data.ContactNo\\\"\\n        [ngClass]=\\\"{ 'is-invalid': formFields.ContactNo.errors }\\\"\\n      />\\n      <mat-error *ngIf=\\\"!!formFields.ContactNo.errors\\\">\\n        <mat-error *ngIf=\\\"!!formFields.ContactNo.errors.required\\\">ContactNo is required</mat-error>\\n      </mat-error>\\n    </mat-form-field>\\n  </div>\\n</mat-dialog-content>\\n<mat-dialog-actions align=\\\"end\\\">\\n  <button class=\\\"mat-raised-button\\\" (click)=\\\"close()\\\">Close</button>\\n  <button class=\\\"mat-raised-button mat-primary\\\" [mat-dialog-close]=\\\"true\\\" [disabled]=\\\"!frmAddCustomer.valid\\\" (click)=\\\"saveCustomer()\\\">\\n    Save\\n  </button>\\n</mat-dialog-actions>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xheW91dC9jdXN0b21lci9hZGRjdXN0b21lci9hZGRjdXN0b21lci5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, Inject, OnInit, ViewEncapsulation } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\nimport { CustomerService } from '../customer.service';\nimport { LoginResponse } from 'src/app/login/login';\nimport { NotificationService } from 'src/app/shared/services/notification.service';\nimport { Customer } from '../customer';\n@Component({\n  selector: 'app-addcustomer',\n  templateUrl: './addcustomer.component.html',\n  styleUrls: ['./addcustomer.component.scss']\n})\nexport class AddcustomerComponent implements OnInit {\n  frmAddCustomer: FormGroup;\n\n  constructor(\n    public dialogRef: MatDialogRef<AddcustomerComponent>,\n    private formBuilder: FormBuilder,\n    private customerService: CustomerService,\n    private notificationService: NotificationService,\n    @Inject(MAT_DIALOG_DATA) public data: Customer\n  ) {}\n\n  ngOnInit() {\n    this.frmAddCustomer = this.formBuilder.group({\n      Name: ['', Validators.required],\n      Email: ['', [Validators.required, Validators.email]],\n      ContactNo: ['', Validators.required],\n      CommunityName: ['', Validators.required],\n      Type: 2,\n      ParentId: localStorage.getItem('customerId'),\n      Id: this.data.Id\n    });\n  }\n\n  get formFields() {\n    return this.frmAddCustomer.controls;\n  }\n\n  saveCustomer() {\n    this.customerService.saveCustomer(this.frmAddCustomer.value).subscribe(\n      (data: LoginResponse) => {\n        if (data['ErrorCode'] === 200) {\n          this.notificationService.openSnackbar(data['Message']);\n          this.onNoClick();\n        } else {\n          this.notificationService.openSnackbar(data['Message']);\n        }\n      },\n      error => {\n        console.log(error);\n      }\n    );\n  }\n\n  close() {\n    this.onNoClick();\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { CustomerComponent } from './customer.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: CustomerComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class CustomerRoutingModule {}\n","module.exports = \"<div class=\\\"mb-20\\\">\\r\\n  Customers\\r\\n</div>\\r\\n<div class=\\\"mb-20\\\" fxLayout=\\\"row\\\" fxLayout.lt-md=\\\"column\\\" fxFlex>\\r\\n  <div fxFlex>\\r\\n    <mat-form-field>\\r\\n      <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\" />\\r\\n    </mat-form-field>\\r\\n  </div>\\r\\n  <div fxFlex>\\r\\n    <button style=\\\"float:right\\\" mat-mini-fab color=\\\"primary\\\" (click)=\\\"openDialog()\\\">\\r\\n      <mat-icon>add</mat-icon>\\r\\n    </button>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"mat-elevation-z8\\\">\\r\\n  <table mat-table [dataSource]=\\\"dataSource\\\" matSort>\\r\\n    <ng-container matColumnDef=\\\"Select\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef>\\r\\n        <mat-checkbox\\r\\n          (change)=\\\"$event ? masterToggle() : null\\\"\\r\\n          [checked]=\\\"selection.hasValue() && isAllSelected()\\\"\\r\\n          [indeterminate]=\\\"selection.hasValue() && !isAllSelected()\\\"\\r\\n          [aria-label]=\\\"checkboxLabel()\\\"\\r\\n        >\\r\\n        </mat-checkbox>\\r\\n      </th>\\r\\n      <td mat-cell *matCellDef=\\\"let row\\\">\\r\\n        <mat-checkbox\\r\\n          (click)=\\\"$event.stopPropagation()\\\"\\r\\n          (change)=\\\"$event ? selection.toggle(row) : null\\\"\\r\\n          [checked]=\\\"selection.isSelected(row)\\\"\\r\\n          [aria-label]=\\\"checkboxLabel(row)\\\"\\r\\n        >\\r\\n        </mat-checkbox>\\r\\n      </td>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"Id\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>ID</th>\\r\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{ row.Id }}</td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"Name\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\\r\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{ row.Name }}</td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"Email\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Email</th>\\r\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{ row.Email }}</td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"Contact\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Contact</th>\\r\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{ row.ContactNo }}</td>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"Actions\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Actions</th>\\r\\n      <td mat-cell *matCellDef=\\\"let row\\\">\\r\\n        <button mat-icon-button color=\\\"primary\\\">\\r\\n          <mat-icon mat-icon-button (click)=\\\"openDialog(row)\\\">edit</mat-icon>\\r\\n        </button>\\r\\n        <button mat-icon-button color=\\\"warn\\\">\\r\\n          <mat-icon mat-icon-button (click)=\\\"deleteCustomer(row)\\\">delete</mat-icon>\\r\\n        </button>\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns\\\"></tr>\\r\\n  </table>\\r\\n\\r\\n  <mat-paginator [pageSize]=\\\"10\\\" [pageSizeOptions]=\\\"[1, 5, 10, 25, 100]\\\"></mat-paginator>\\r\\n</div>\\r\\n\"","module.exports = \"table {\\n  width: 100%; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbGF5b3V0L2N1c3RvbWVyL0Q6XFxBSlxcUXVlcnlNYWtlci9zcmNcXGFwcFxcbGF5b3V0XFxjdXN0b21lclxcY3VzdG9tZXIuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxZQUFXLEVBQ2QiLCJmaWxlIjoic3JjL2FwcC9sYXlvdXQvY3VzdG9tZXIvY3VzdG9tZXIuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJ0YWJsZSB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxufVxyXG5cclxuLy8gL2RlZXAvIC5tYXQtZGlhbG9nLWNvbnRlbnQge1xyXG4vLyAgICAgb3ZlcmZsb3cteTogaGlkZGVuICFpbXBvcnRhbnQ7XHJcbi8vIH1cclxuLy8gL2RlZXAvIC5tYXQtZGlhbG9nLWNvbnRlbnQge1xyXG4vLyAgICAgaGVpZ2h0OicxMDAlJ1xyXG4vLyB9Il19 */\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { CustomerService } from './customer.service';\r\nimport { Customer, CustomerList } from './customer';\r\nimport { MatPaginator, MatSort, MatTableDataSource, MatDialog, MatDialogConfig } from '@angular/material';\r\nimport { AddcustomerComponent } from './addcustomer/addcustomer.component';\r\nimport { LoginResponse } from 'src/app/login/login';\r\nimport { NotificationService } from 'src/app/shared/services/notification.service';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\n@Component({\r\n  selector: 'app-customer',\r\n  templateUrl: './customer.component.html',\r\n  styleUrls: ['./customer.component.scss']\r\n})\r\nexport class CustomerComponent implements OnInit {\r\n  displayedColumns = ['Select', 'Id', 'Name', 'Email', 'Contact', 'Actions'];\r\n  dataSource: MatTableDataSource<Customer>;\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n\r\n  selection = new SelectionModel<Customer>(true, []);\r\n\r\n  constructor(private customerService: CustomerService, public dialog: MatDialog, private notificationService: NotificationService) {}\r\n\r\n  ngOnInit() {\r\n    this.getAllCustomers();\r\n  }\r\n\r\n  isAllSelected() {\r\n    const numSelected = this.selection.selected.length;\r\n    const numRows = this.dataSource.data.length;\r\n    return numSelected === numRows;\r\n  }\r\n\r\n  masterToggle() {\r\n    this.isAllSelected() ? this.selection.clear() : this.dataSource.data.forEach(row => this.selection.select(row));\r\n  }\r\n\r\n  checkboxLabel(row?: Customer): string {\r\n    if (!row) {\r\n      return `${this.isAllSelected() ? 'select' : 'deselect'} all`;\r\n    }\r\n    return `${this.selection.isSelected(row) ? 'deselect' : 'select'} row ${row.Id + 1}`;\r\n  }\r\n\r\n  openDialog(row: Customer) {\r\n    const dialogConfig = new MatDialogConfig();\r\n    if (row != null && row !== undefined) {\r\n      dialogConfig.data = {\r\n        Id: row.Id,\r\n        Title: 'Edit Customer',\r\n        Name: row.Name,\r\n        Email: row.Email,\r\n        ContactNo: row.ContactNo,\r\n        CommunityName: row.CommunityName\r\n      };\r\n    } else {\r\n      dialogConfig.data = {\r\n        Id: 0,\r\n        Title: 'Add Customer',\r\n        Name: '',\r\n        Email: '',\r\n        ContactNo: '',\r\n        CommunityName: ''\r\n      };\r\n    }\r\n    dialogConfig.width = '500px';\r\n    const dialogRef = this.dialog.open(AddcustomerComponent, dialogConfig);\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      this.getAllCustomers();\r\n    });\r\n  }\r\n  applyFilter(filterValue: string) {\r\n    filterValue = filterValue.trim(); // Remove whitespace\r\n    filterValue = filterValue.toLowerCase(); // Datasource defaults to lowercase matches\r\n    this.dataSource.filter = filterValue;\r\n    if (this.dataSource.paginator) {\r\n      this.dataSource.paginator.firstPage();\r\n    }\r\n  }\r\n  getAllCustomers() {\r\n    const result = this.customerService.getList(localStorage.getItem('id')).subscribe(\r\n      (data: CustomerList) => {\r\n        const custs: Customer[] = [];\r\n        for (const v in data) {\r\n          custs.push(data[v]);\r\n        }\r\n        this.dataSource = new MatTableDataSource(custs);\r\n        this.dataSource.paginator = this.paginator;\r\n        this.dataSource.sort = this.sort;\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  deleteCustomer(row) {\r\n    this.customerService.deleteCustomer(row.Id).subscribe(\r\n      (data: LoginResponse) => {\r\n        if (data['ErrorCode'] === 200) {\r\n          this.notificationService.openSnackbar(data['Message']);\r\n          this.getAllCustomers();\r\n        } else {\r\n          this.notificationService.openSnackbar(data['Message']);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatTableModule } from '@angular/material';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { CustomerRoutingModule } from './customer-routing.module';\r\nimport { CustomerComponent } from './customer.component';\r\nimport {\r\n  MatBottomSheetModule,\r\n  MatButtonModule,\r\n  MatCardModule,\r\n  MatDialogModule,\r\n  MatFormFieldModule,\r\n  MatIconModule,\r\n  MatInputModule,\r\n  MatListModule,\r\n  MatOptionModule,\r\n  MatPaginatorModule,\r\n  MatProgressBarModule,\r\n  MatRadioModule,\r\n  MatSelectModule,\r\n  MatSliderModule,\r\n  MatSnackBarModule,\r\n  MatTooltipModule,\r\n  MatCheckboxModule\r\n} from '@angular/material';\r\nimport { AddcustomerComponent } from './addcustomer/addcustomer.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n@NgModule({\r\n  declarations: [CustomerComponent, AddcustomerComponent],\r\n  imports: [\r\n    CommonModule,\r\n    MatCheckboxModule,\r\n    CustomerRoutingModule,\r\n    MatFormFieldModule,\r\n    MatPaginatorModule,\r\n    MatInputModule,\r\n    MatTableModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatDialogModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    FlexLayoutModule.withConfig({ addFlexToParent: false })\r\n  ],\r\n  entryComponents: [AddcustomerComponent]\r\n})\r\nexport class CustomerModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport { Customer, CustomerList } from './customer';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { LoginResponse } from 'src/app/login/login';\r\nimport { Apiurl } from 'src/app/shared/apiurl';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CustomerService {\r\n  constructor(private http: HttpClient) {}\r\n  url = Apiurl.apiurl;\r\n  getList(id: string): Observable<CustomerList> {\r\n    return this.http.get<CustomerList>(this.url + 'GetCustomer?parentId=' + 1, {});\r\n  }\r\n\r\n  saveCustomer(customer: Customer): Observable<LoginResponse> {\r\n    return this.http.post<LoginResponse>(this.url + 'AddCustomer', customer);\r\n  }\r\n\r\n  deleteCustomer(id: number): Observable<LoginResponse> {\r\n    return this.http.delete<LoginResponse>(this.url + 'DeleteCustomer/' + id);\r\n  }\r\n}\r\n","export class Customer {\r\n  ErrorCode: number;\r\n  Message: string;\r\n  Id: number;\r\n  Name: string;\r\n  Email: string;\r\n  ContactNo: string;\r\n  Password: string;\r\n  Type: number;\r\n  ParentId: number;\r\n  Title: string;\r\n  CommunityName: string;\r\n}\r\nexport class CustomerList {\r\n  Customers: Customer[];\r\n}\r\n"],"sourceRoot":""}